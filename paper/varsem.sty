\ProvidesPackage{varsem}

\RequirePackage{mathpartir}
\RequirePackage{cc}

% Syntax

% arithmetic expressions

\newcommand{\AExpr}{a}
\newcommand{\Num}{n}
\newcommand{\Var}{x}

% boolean expressions

\newcommand{\BLit}{b}
\newcommand{\True}{\CCkeyw{true}}
\newcommand{\False}{\CCkeyw{false}}
\newcommand{\BExpr}{e}
\newcommand{\Neg}[1]{\CCkeyw{not}\ #1}
\newcommand{\Conj}[2]{#1\ \CCkeyw{and}\ #2}

% statements

\newcommand{\Stmt}{s}
\newcommand{\Skip}{\CCkeyw{skip}}
\newcommand{\Assign}[2]{#1 \coloneqq #2}
\newcommand{\Seq}[2]{#1\ ;\ #2}
\newcommand{\ITE}[3]{\CCkeyw{if}\ #1\ \CCkeyw{then}\ #2\ \CCkeyw{else}\ #3}
\newcommand{\While}[2]{\CCkeyw{while}\ #1\ \CCkeyw{do}\ #2}
\newcommand{\Throw}[1]{\CCkeyw{throw}\ #1}
\newcommand{\Try}[3]{\CCkeyw{try}\ #1\ \CCkeyw{catch}\ #2\ \CCkeyw{with}\ #3}

% Conditions

\newcommand{\Cond}{C}
\newcommand{\Dimension}{D}
\newcommand{\CNeg}[1]{\neg #1}
\newcommand{\CAnd}[2]{#1 \wedge #2}
\newcommand{\COr}[2]{#1 \vee #2}

% Choices

\newcommand{\tagtree}[3]{#1 \langle #2, #3 \rangle}


% Semantics

\newcommand{\Store}{S}
\newcommand{\Error}{E}
\newcommand{\Nothing}{\bullet}
\newcommand{\Empty}{\mathit{empty}}
\newcommand{\Ins}[3]{\mathit{ins}((#1,#2),#3)}
\newcommand{\StoreSynt}{
S &::=& \Empty & \textit{Empty store} \\
& | & \Ins{\Var}{\Num}{\Store} & \textit{Insert value \Num\ as variable \Var\ in \Store} \\
}
\newcommand{\ErrorSynt}{
\Error &::=& \Nothing & \textit{No error} \\
& | & \Num & \textit{Error with value \Num}
}

\newcommand{\BigA}[3]{(#1,#2) \Downarrow_A #3}
\newcommand{\BigB}[3]{(#1,#2) \Downarrow_B #3}
\newcommand{\Lookup}[3]{\mathit{lookup}(#1,#2,#3)}
\newcommand{\BigS}[5]{(#1,#2,#3) \Downarrow_S (#4,#5)}
\newcommand{\BigVA}[4]{(#1,#2,#3) \Downarrow_{VA} #4}
\newcommand{\BigVB}[4]{(#1,#2,#3) \Downarrow_{VB} #4}
\newcommand{\VLookup}[3]{\mathit{vlookup}(#1,#2,#3)}
\newcommand{\VNum}{\bar{\Num}}
\newcommand{\VBool}{\bar{\BLit}}
\newcommand{\LiftA}[2]{\mathit{liftA}(#1,#2)}
\newcommand{\LiftATwo}[3]{\mathit{liftA2}(#1,#2,#3)}
\newcommand{\Sat}[1]{\mathit{sat}(#1)}
\newcommand{\Unsat}[1]{\mathit{unsat}(#1)}





% IMP syntax
\newcommand{\IMPArith}{
\AExpr &::=& \Num & \textit{Integer literal} \\
& | & \Var & \textit{Variable reference} \\
& | & \AExpr + \AExpr & \textit{Addition} \\
}
\newcommand{\IMPBLit}{
\BLit &::=& \True \\
& | & \False \\
}
\newcommand{\IMPBool}{
\BExpr &::=& \BLit & \textit{Boolean literal} \\
& | & \Neg{\BExpr} & \textit{Negation} \\
& | & \Conj{\BExpr}{\BExpr} & \textit{Conjunction} \\
& | & \AExpr < \AExpr & \textit{Less} \\
}
\newcommand{\IMPStmt}{
\Stmt &::=& \Skip & \textit{Noop} \\
& | & \Assign{\Var}{\AExpr} & \textit{Assignment} \\
& | & \Seq{\Stmt}{\Stmt} & \textit{Sequencing} \\
& | & \ITE{\BExpr}{\Stmt}{\Stmt} & \textit{Conditional} \\
& | & \While{\BExpr}{\Stmt} & \textit{Looping} \\
& | & \Throw{\AExpr} & \textit{Throw error} \\
& | & \Try{\Stmt}{\Var}{\Stmt} & \textit{Catch error}
}

% VIMP syntax

\newcommand{\VIMPCond}{
\Cond &::=& \BLit & \textit{Boolean literal} \\
& | & \Dimension & \textit{Dimension name} \\
& | & \CNeg{\Cond} & \textit{Negation} \\
& | & \COr{\Cond}{\Cond} & \textit{Disjunction} \\
& | & \CAnd{\Cond}{\Cond} & \textit{Conjunction} \\
}
\newcommand{\VIMPArith}{
\IMPArith
& | & \tagtree{\Cond}{\AExpr}{\AExpr} & \textit{Choice} \\
}
\newcommand{\VIMPBool}{
\IMPBool
& | & \tagtree{\Cond}{\BExpr}{\BExpr} & \textit{Choice} \\
}
\newcommand{\VIMPStmt}{
\IMPStmt \\
& | & \tagtree{\Cond}{\Stmt}{\Stmt} & \textit{Choice}
}

% IMP Expr Semantics

\newcommand{\LookupHere}{
  \infer [Lookup-Here]
    { }
    {\Lookup{\Ins{\Var}{\Num}{\Store}}{\Var}{\Num}}
}

\newcommand{\LookupThere}{
  \infer [Lookup-There]
    {\Lookup{\Store}{\Var}{\Num}}
    {\Lookup{\Ins{\Var'}{\Num'}{\Store}}{\Var}{\Num}}
}

\newcommand{\BigAType}{\BigA{\Store}{\AExpr}{\Num}}

\newcommand{\BigN}{
  \infer [A-Num]
    { }
    {\BigA{\Store}{\Num}{\Num}}
}

\newcommand{\BigVar}{
  \infer [A-Ref]
    {\Lookup{\Store}{\Var}{\Num}}
    {\BigA{\Store}{\Var}{\Num}}
}

\newcommand{\BigAdd}{
  \infer [A-Add]
    {\BigA{\Store}{\AExpr}{\Num} \\
      \BigA{\Store}{\AExpr'}{\Num'}}
    {\BigA{\Store}{\AExpr+\AExpr'}{\Num+\Num'}}
}

\newcommand{\BigBType}{\BigB{\Store}{\BExpr}{\BLit}}

\newcommand{\BigBool}{
  \infer [B-Bool]
    { }
    {\BigB{\Store}{\BLit}{\BLit}}
}

\newcommand{\BigNot}{
  \infer [B-Not]
    {\BigB{\Store}{\BExpr}{\BLit}}
    {\BigB{\Store}{\Neg{\BExpr}}{\neg \BLit}}
}

\newcommand{\BigAnd}{
  \infer [B-And]
    {\BigB{\Store}{\BExpr}{\BLit} \\
      \BigB{\Store}{\BExpr'}{\BLit'}}
    {\BigB{\Store}{\Conj{\BExpr}{\BExpr'}}{\BLit \wedge \BLit'}}
}

\newcommand{\BigLess}{
  \infer [B-Less]
    {\BigA{\Store}{\AExpr}{\Num} \\
      \BigA{\Store}{\AExpr'}{\Num'}}
    {\BigB{\Store}{\AExpr<\AExpr'}{\Num<\Num'}}
}

% IMP Stmt Semantics

\newcommand{\BigSType}{\BigS{\Error}{\Store}{\Stmt}{\Error}{\Store}}

\newcommand{\BigErr}{
  \infer [S-Err]
    { }
    {\BigS{\Num}{\Store}{\Stmt}{\Num}{\Store}}
}
\newcommand{\BigSkip}{
  \infer [S-Skip]
    { }
    {\BigS{\Error}{\Store}{\Skip}{\Error}{\Store}}
}
\newcommand{\BigAssn}{
  \infer [S-Assn]
    {\BigA{\Store}{\AExpr}{\Num}}
    {\BigS{\Nothing}{\Store}{\Assign{\Var}{\AExpr}}{\Nothing}{\Ins{\Var}{\Num}{\Store}}}
}
\newcommand{\BigSeq}{
  \infer [S-Seq]
    {\BigS{\Error}{\Store}{\Stmt}{\Error'}{\Store'} \\
      \BigS{\Error'}{\Store'}{\Stmt'}{\Error''}{\Store''}}
    {\BigS{\Error}{\Store}{\Seq{\Stmt}{\Stmt'}}{\Error''}{\Store''}}
}
\newcommand{\BigIfT}{
  \infer [S-IfT]
    {\BigB{\Store}{\BExpr}{\True} \\
      \BigS{\Nothing}{\Store}{\Stmt}{\Error}{\Store'}}
    {\BigS{\Nothing}{\Store}{\ITE{\BExpr}{\Stmt}{\Stmt'}}{\Error}{\Store'}}
}
\newcommand{\BigIfF}{
  \infer [S-IfF]
    {\BigB{\Store}{\BExpr}{\False} \\
      \BigS{\Nothing}{\Store}{\Stmt'}{\Error}{\Store'}}
    {\BigS{\Nothing}{\Store}{\ITE{\BExpr}{\Stmt}{\Stmt'}}{\Error}{\Store'}}
}
\newcommand{\BigWhileT}{
  \infer [S-WhileT]
    {\BigB{\Store}{\BExpr}{\True} \\
      \BigS{\Nothing}{\Store}{\Stmt}{\Error}{\Store'} \\
      \BigS{\Error}{\Store'}{\While{\BExpr}{\Stmt}}{\Error'}{\Store''}}
    {\BigS{\Nothing}{\Store}{\While{\BExpr}{\Stmt}}{\Error'}{\Store''}}
}
\newcommand{\BigWhileF}{
  \infer [S-WhileF]
    {\BigB{\Store}{\BExpr}{\False}}
    {\BigS{\Error}{\Store}{\While{\BExpr}{\Stmt}}{\Error}{\Store}}
}
\newcommand{\BigThrow}{
  \infer [S-Throw]
    {\BigA{\Store}{\AExpr}{\Num}}
    {\BigS{\Nothing}{\Store}{\Throw{\AExpr}}{\Num}{\Store}}
}
\newcommand{\BigTry}{
  \infer [S-Try]
    {\BigS{\Nothing}{\Store}{\Stmt}{\Nothing}{\Store'}}
    {\BigS{\Nothing}{\Store}{\Try{\Stmt}{\Var}{\Stmt'}}{\Nothing}{\Store'}}
}
\newcommand{\BigCatch}{
  \infer [S-Catch]
    {\BigS{\Nothing}{\Store}{\Stmt}{\Num}{\Store'} \\
      \BigS{\Nothing}{\Ins{\Var}{\Num}{\Store'}}{\Stmt'}{\Error}{\Store''}}
    {\BigS{\Nothing}{\Store}{\Try{\Stmt}{\Var}{\Stmt'}}{\Error}{\Store''}}
}

% variational operations

%\newcommand{\Sat}[1]{\mathit{sat}(#1)}
%\newcommand{\Unsat}[1]{\mathit{unsat}(#1}
%\newcommand{\Taut}[1]{\mathit{taut}(#1)}
%\newcommand{\Imply}[2]{#1 \Rightarrow #2}
%
%\newcommand{\TautRule}{
%  \infer [Taut]
%    {\Unsat{\CNeg{\Cond}}}
%    {\Taut{\Cond}}
%}
%\newcommand{\ImpliesRule}{
%  \infer [Implies]
%    {\Taut{\COr{(\CNeg{\Cond})}{\Cond'}}}
%    {\Imply{\Cond}{\Cond'}}
%}
%\newcommand{\SelNum}{
%  \infer [Sel-Num]
%    { }
%    {\Sel{\Cond}{\Num}{\Num}}
%}
%\newcommand{\SelVar}{
%  \infer [Sel-Var]
%    { }
%    {\Sel{\Cond}{\Var}{\Var}}
%}
%\newcommand{\SelAdd}{
%  \infer [Sel-Add]
%    {\Sel{\Cond}{\AExpr}{\AExpr''} \\
%      \Sel{\Cond}{\AExpr'}{\AExpr'''}}
%    {\Sel{\Cond}{\AExpr+\AExpr'}{\AExpr''+\AExpr'''}}
%}
%\newcommand{\SelChcOne}{
%  \infer [Sel-Chc1]
%    {\Imply{\Cond}}
%}

% VIMP semantics

\newcommand{\VIntSynt}{
\VNum &::=& \Num & \textit{Integer literal} \\
& | & \tagtree{\Cond}{\VNum}{\VNum} & \textit{Choice} \\
}
\newcommand{\VBoolSynt}{
\VBool &::=& \BLit & \textit{Boolean literal} \\
& | & \tagtree{\Cond}{\VBool}{\VBool} & \textit{Choice}
}

\newcommand{\BigVAType}{\BigVA{\Cond}{\Store}{\AExpr}{\VNum}}
\newcommand{\BigVNum}{
  \infer [VA-Num]
    { }
    {\BigVA{\Cond}{\Store}{\Num}{\Num}}
}
\newcommand{\BigVRef}{
  \infer [VA-Ref]
    { }
    {\BigVA{\Cond}{\Store}{\Var}{\VLookup{\Cond}{\Var}{\Store}}}
}
\newcommand{\BigVAdd}{
  \infer [VA-Add]
    {\BigVA{\Cond}{\Store}{\BExpr}{\VNum} \\
      \BigVA{\Cond}{\Store}{\BExpr'}{\VNum'}}
    {\BigVA{\Cond}{\Store}{\BExpr+\BExpr'}{\LiftATwo{+}{\VNum}{\VNum'}}}
}
\newcommand{\BigVAChcOne}{
  \infer [VA-Chc1] 
    {\Sat{\CAnd{\Cond}{\Cond'}} \\
      \Sat{\CAnd{\Cond}{\CNeg{\Cond'}}} \\
      \BigVA{\CAnd{\Cond}{\Cond'}}{\Store}{\AExpr}{\VNum} \\
      \BigVA{\CAnd{\Cond}{\CNeg{\Cond'}}}{\Store}{\AExpr'}{\VNum}}
    {\BigVA{\Cond}{\Store}{\tagtree{\Cond'}{\AExpr}{\AExpr'}}{\tagtree{\Cond'}{\VNum}{\VNum'}}}
}
\newcommand{\BigVAChcTwo}{
  \infer [VA-Chc2]
    {\Unsat{\CAnd{\Cond}{\Cond'}} \\
      \Sat{\CAnd{\Cond}{\CNeg{\Cond'}}} \\
      \BigVA{\CAnd{\Cond}{\CNeg{\Cond'}}}{\Store}{\AExpr'}{\VNum}}
    {\BigVA{\Cond}{\Store}{\tagtree{\Cond'}{\AExpr}{\AExpr'}}{\VNum}}
}
\newcommand{\BigVAChcThree}{
  \infer [VA-Chc3]
    {\Sat{\CAnd{\Cond}{\Cond'}} \\
      \Unsat{\CAnd{\Cond}{\CNeg{\Cond'}}} \\
      \BigVA{\CAnd{\Cond}{\Cond'}}{\Store}{\AExpr}{\VNum}}
    {\BigVA{\Cond}{\Store}{\tagtree{\Cond'}{\AExpr}{\AExpr'}}{\VNum}}
}

\newcommand{\BigVBType}{\BigVB{\Cond}{\Store}{\BExpr}{\VBool}}
\newcommand{\BigVBool}{
  \infer [VB-Bool]
    { }
    {\BigVB{\Cond}{\Store}{\BLit}{\BLit}}
}
\newcommand{\BigVNot}{
  \infer [VB-Not]
    {\BigVB{\Cond}{\Store}{\BExpr}{\VBool}}
    {\BigVB{\Cond}{\Store}{\Neg{\BExpr}}{\LiftA{\neg}{\VBool}}}
}
\newcommand{\BigVAnd}{
  \infer [VB-And]
    {\BigVB{\Cond}{\Store}{\BExpr}{\VBool} \\
      \BigVB{\Cond}{\Store}{\BExpr'}{\VBool'}}
    {\BigVB{\Cond}{\Store}{\Conj{\BExpr}{\BExpr'}}{\LiftATwo{\wedge}{\VBool}{\VBool'}}}
}
\newcommand{\BigVLess}{
  \infer [VB-Less]
    {\BigVA{\Cond}{\Store}{\AExpr}{\VNum} \\
      \BigVA{\Cond}{\Store}{\AExpr'}{\VNum'}}
    {\BigVB{\Cond}{\Store}{\AExpr<\AExpr'}{\LiftATwo{<}{\VNum}{\VNum'}}}
}
\newcommand{\BigVBChcOne}{
  \infer [VB-Chc1]
    {\Sat{\CAnd{\Cond}{\Cond'}} \\
      \Sat{\CAnd{\Cond}{\CNeg{\Cond'}}} \\
      \BigVB{\CAnd{\Cond}{\Cond'}}{\Store}{\BExpr}{\VBool} \\
      \BigVB{\CAnd{\Cond}{\CNeg{\Cond'}}}{\Store}{\BExpr'}{\VBool}}
    {\BigVB{\Cond}{\Store}{\tagtree{\Cond'}{\BExpr}{\BExpr'}}{\tagtree{\Cond'}{\VBool}{\VBool'}}}
}
\newcommand{\BigVBChcTwo}{
  \infer [VB-Chc2]
    {\Unsat{\CAnd{\Cond}{\Cond'}} \\
      \Sat{\CAnd{\Cond}{\CNeg{\Cond'}}} \\
      \BigVB{\CAnd{\Cond}{\CNeg{\Cond'}}}{\Store}{\BExpr'}{\VBool}}
    {\BigVB{\Cond}{\Store}{\tagtree{\Cond'}{\BExpr}{\BExpr'}}{\VBool}}
}
\newcommand{\BigVBChcThree}{
  \infer [VB-Chc3]
    {\Sat{\CAnd{\Cond}{\Cond'}} \\
      \Unsat{\CAnd{\Cond}{\CNeg{\Cond'}}} \\
      \BigVB{\CAnd{\Cond}{\Cond'}}{\Store}{\BExpr}{\VBool}}
    {\BigVB{\Cond}{\Store}{\tagtree{\Cond'}{\BExpr}{\BExpr'}}{\VBool}}
}



